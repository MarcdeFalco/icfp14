# 1 "lexer.mll"
 
  open Parser

  exception Error of string
    
  let keyword_table = Hashtbl.create 72
  let _ =
      List.iter (fun (kwd, tok) -> Hashtbl.add keyword_table kwd tok)
        [ 
            ("for", FOR); ("let", LET);
            ("done", DONE); ("do", DO);
            ("to", TO); ("if", IF);
            ("then", THEN); ("else", ELSE);
            ("rec", REC); ("fun", FUN);
            ("in", IN); ("var", VAR);
            ("hd", HD); ("tl", TL);
            ("print", PRINT); ("return", RETURN)
        ]

# 22 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\226\255\227\255\078\000\002\000\003\000\235\255\236\255\
    \237\255\238\255\239\255\240\255\241\255\242\255\244\255\245\255\
    \246\255\247\255\248\255\250\255\156\000\030\000\154\000\254\255\
    \054\000\255\255\252\255\233\255\251\255\234\255\232\255\096\000\
    \252\255\253\255\095\000\098\000\255\255\254\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\027\000\025\000\026\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\024\000\006\000\002\000\255\255\
    \012\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\002\000\002\000\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\033\000\
    \000\000\000\000\255\255\255\255\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\023\000\023\000\000\000\000\000\023\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \023\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \024\000\013\000\018\000\019\000\009\000\021\000\008\000\017\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\007\000\006\000\020\000\005\000\004\000\030\000\
    \029\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\012\000\026\000\011\000\015\000\003\000\
    \025\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\016\000\010\000\014\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \034\000\037\000\035\000\036\000\000\000\000\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\000\000\000\000\000\000\000\000\003\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\028\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\000\000\000\000\000\000\000\000\
    \000\000\027\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \032\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
    \005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\
    \024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \031\000\034\000\031\000\035\000\255\255\255\255\255\255\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\255\255\255\255\255\255\255\255\003\000\255\255\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\020\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\255\255\255\255\255\255\255\255\
    \255\255\020\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \031\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 22 "lexer.mll"
       ( comments 0 lexbuf )
# 169 "lexer.ml"

  | 1 ->
# 24 "lexer.mll"
    ( token lexbuf )
# 174 "lexer.ml"

  | 2 ->
let
# 25 "lexer.mll"
                i
# 180 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 25 "lexer.mll"
                  ( INT (int_of_string i) )
# 184 "lexer.ml"

  | 3 ->
# 26 "lexer.mll"
       ( ARROW )
# 189 "lexer.ml"

  | 4 ->
# 27 "lexer.mll"
       ( LEFTARROW )
# 194 "lexer.ml"

  | 5 ->
# 28 "lexer.mll"
      ( PLUS )
# 199 "lexer.ml"

  | 6 ->
# 29 "lexer.mll"
      ( MINUS )
# 204 "lexer.ml"

  | 7 ->
# 30 "lexer.mll"
      ( TIMES )
# 209 "lexer.ml"

  | 8 ->
# 31 "lexer.mll"
      ( DIV )
# 214 "lexer.ml"

  | 9 ->
# 32 "lexer.mll"
      ( LACCO )
# 219 "lexer.ml"

  | 10 ->
# 33 "lexer.mll"
      ( POW )
# 224 "lexer.ml"

  | 11 ->
# 34 "lexer.mll"
      ( RACCO )
# 229 "lexer.ml"

  | 12 ->
# 35 "lexer.mll"
      ( LPAREN )
# 234 "lexer.ml"

  | 13 ->
# 36 "lexer.mll"
      ( RPAREN )
# 239 "lexer.ml"

  | 14 ->
# 37 "lexer.mll"
      ( LBRACKET )
# 244 "lexer.ml"

  | 15 ->
# 38 "lexer.mll"
      ( RBRACKET )
# 249 "lexer.ml"

  | 16 ->
# 39 "lexer.mll"
      ( PIPE )
# 254 "lexer.ml"

  | 17 ->
# 40 "lexer.mll"
      ( COMMA )
# 259 "lexer.ml"

  | 18 ->
# 41 "lexer.mll"
      ( DOT )
# 264 "lexer.ml"

  | 19 ->
# 42 "lexer.mll"
      ( COLON )
# 269 "lexer.ml"

  | 20 ->
# 43 "lexer.mll"
      ( SEMICOLON )
# 274 "lexer.ml"

  | 21 ->
# 44 "lexer.mll"
       ( DOUBLEEQUALS )
# 279 "lexer.ml"

  | 22 ->
# 45 "lexer.mll"
       ( LESSEQUALS )
# 284 "lexer.ml"

  | 23 ->
# 46 "lexer.mll"
       ( GREATEREQUALS )
# 289 "lexer.ml"

  | 24 ->
# 47 "lexer.mll"
      ( LESS )
# 294 "lexer.ml"

  | 25 ->
# 48 "lexer.mll"
      ( GREATER )
# 299 "lexer.ml"

  | 26 ->
# 49 "lexer.mll"
      ( EQUALS )
# 304 "lexer.ml"

  | 27 ->
let
# 50 "lexer.mll"
                                                              s
# 310 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 51 "lexer.mll"
    ( try Hashtbl.find keyword_table s
      with Not_found -> ID s )
# 315 "lexer.ml"

  | 28 ->
# 53 "lexer.mll"
      ( EOF )
# 320 "lexer.ml"

  | 29 ->
# 55 "lexer.mll"
    ( raise (Error (Printf.sprintf "At offset %d: unexpected character.\n" (Lexing.lexeme_start lexbuf))) )
# 325 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comments level lexbuf =
    __ocaml_lex_comments_rec level lexbuf 31
and __ocaml_lex_comments_rec level lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 57 "lexer.mll"
       ( if level = 0 then token lexbuf else comments (level-1) lexbuf )
# 336 "lexer.ml"

  | 1 ->
# 58 "lexer.mll"
       ( comments (level+1) lexbuf )
# 341 "lexer.ml"

  | 2 ->
# 59 "lexer.mll"
    ( comments level lexbuf )
# 346 "lexer.ml"

  | 3 ->
# 60 "lexer.mll"
      ( raise (Error "Non-terminated comment") )
# 351 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comments_rec level lexbuf __ocaml_lex_state

;;

